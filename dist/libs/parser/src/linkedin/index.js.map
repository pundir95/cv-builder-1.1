{"version":3,"sources":["../../../../../libs/parser/src/linkedin/index.ts"],"sourcesContent":["import { createId } from \"@paralleldrive/cuid2\";\r\nimport {\r\n  defaultCertification,\r\n  defaultEducation,\r\n  defaultExperience,\r\n  defaultLanguage,\r\n  defaultProfile,\r\n  defaultProject,\r\n  defaultResumeData,\r\n  defaultSkill,\r\n  resumeDataSchema,\r\n} from \"@reactive-resume/schema\";\r\nimport type { Json } from \"@reactive-resume/utils\";\r\nimport { extractUrl, parseArrayLikeCSVEntry, parseCSV } from \"@reactive-resume/utils\";\r\nimport * as JSZip from \"jszip\";\r\nimport type { Schema } from \"zod\";\r\n\r\nimport type { Parser } from \"../interfaces/parser\";\r\nimport type { LinkedIn } from \"./schema\";\r\nimport { linkedInSchema } from \"./schema\";\r\n\r\nexport * from \"./schema\";\r\n\r\nconst avoidTooShort = (name: string, len: number) => {\r\n  if (!name || name.length < len) return \"Unknown\";\r\n  return name;\r\n};\r\n\r\nexport class LinkedInParser implements Parser<JSZip, LinkedIn> {\r\n  schema: Schema;\r\n\r\n  constructor() {\r\n    this.schema = linkedInSchema;\r\n  }\r\n\r\n  async readFile(file: File): Promise<JSZip> {\r\n    const data = await JSZip.loadAsync(file);\r\n\r\n    if (Object.keys(data.files).length === 0) {\r\n      throw new Error(\"ParserError: There were no files found inside the zip archive.\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async validate(data: JSZip) {\r\n    const result: Json = {};\r\n\r\n    for (const [name, file] of Object.entries(data.files)) {\r\n      for (const key of Object.keys(linkedInSchema.shape)) {\r\n        if (name.includes(key)) {\r\n          const content = await file.async(\"text\");\r\n          result[key] = await parseCSV(content);\r\n        }\r\n      }\r\n    }\r\n\r\n    return linkedInSchema.parse(result);\r\n  }\r\n\r\n  convert(data: LinkedIn) {\r\n    const result = JSON.parse(JSON.stringify(defaultResumeData));\r\n\r\n    // Profile\r\n    if (data.Profile && data.Profile.length > 0) {\r\n      const profile = data.Profile[0];\r\n      const twitterHandle = profile[\"Twitter Handles\"];\r\n\r\n      result.basics.name = `${profile[\"First Name\"]} ${profile[\"Last Name\"]}`;\r\n      result.basics.location = profile[\"Geo Location\"];\r\n      result.basics.headline = profile.Headline;\r\n      // profile.Websites is represented as an array-like structure f.e. [COMPANY:https://some.link,PORTFOLIO:...]\r\n      const extractFirstWebsiteLink = (entry: string) =>\r\n        (parseArrayLikeCSVEntry(entry)[0] ?? \"\").replace(/.*?:/, \"\");\r\n      result.basics.url.href = extractUrl(extractFirstWebsiteLink(profile.Websites)) ?? \"\";\r\n      result.sections.summary.content = profile.Summary;\r\n      if (twitterHandle) {\r\n        result.sections.profiles.items.push({\r\n          ...defaultProfile,\r\n          id: createId(),\r\n          icon: \"twitter\",\r\n          network: \"Twitter\",\r\n          username: twitterHandle,\r\n          url: { ...defaultProfile.url, href: `https://twitter.com/${twitterHandle}` },\r\n        });\r\n      }\r\n    }\r\n\r\n    // Email Addresses\r\n    if (data[\"Email Addresses\"] && data[\"Email Addresses\"].length > 0) {\r\n      const email = data[\"Email Addresses\"][0];\r\n\r\n      result.basics.email = email[\"Email Address\"];\r\n    }\r\n\r\n    // Positions\r\n    if (data.Positions && data.Positions.length > 0) {\r\n      for (const position of data.Positions) {\r\n        result.sections.experience.items.push({\r\n          ...defaultExperience,\r\n          id: createId(),\r\n          company: position[\"Company Name\"],\r\n          position: position.Title,\r\n          location: position.Location,\r\n          summary: position.Description ?? \"\",\r\n          date: `${position[\"Started On\"]} - ${position[\"Finished On\"] ?? \"Present\"}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Education\r\n    if (data.Education && data.Education.length > 0) {\r\n      for (const education of data.Education) {\r\n        result.sections.education.items.push({\r\n          ...defaultEducation,\r\n          id: createId(),\r\n          institution: avoidTooShort(education[\"School Name\"], 2),\r\n          studyType: avoidTooShort(education[\"Degree Name\"], 2),\r\n          summary: avoidTooShort(education.Notes ?? \"\", 2),\r\n          date: `${education[\"Start Date\"]} - ${education[\"End Date\"] ?? \"Present\"}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Skills\r\n    if (data.Skills && data.Skills.length > 0) {\r\n      for (const skill of data.Skills) {\r\n        result.sections.skills.items.push({\r\n          ...defaultSkill,\r\n          id: createId(),\r\n          name: skill.Name,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Languages\r\n    if (data.Languages && data.Languages.length > 0) {\r\n      for (const language of data.Languages) {\r\n        result.sections.languages.items.push({\r\n          ...defaultLanguage,\r\n          id: createId(),\r\n          name: language.Name,\r\n          description: language.Proficiency ?? \"\",\r\n        });\r\n      }\r\n    }\r\n\r\n    // Certifications\r\n    if (data.Certifications && data.Certifications.length > 0) {\r\n      for (const certification of data.Certifications) {\r\n        result.sections.certifications.items.push({\r\n          ...defaultCertification,\r\n          id: createId(),\r\n          name: certification.Name,\r\n          issuer: certification.Authority,\r\n          url: { ...defaultCertification.url, href: certification.Url },\r\n          date: `${certification[\"Started On\"]} - ${certification[\"Finished On\"] ?? \"Present\"}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Projects\r\n    if (data.Projects && data.Projects.length > 0) {\r\n      for (const project of data.Projects) {\r\n        result.sections.projects.items.push({\r\n          ...defaultProject,\r\n          id: createId(),\r\n          name: project.Title,\r\n          description: project.Description,\r\n          url: { ...defaultProject.url, href: project.Url ?? \"\" },\r\n          date: `${project[\"Started On\"]} - ${project[\"Finished On\"] ?? \"Present\"}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    return resumeDataSchema.parse(result);\r\n  }\r\n}\r\n"],"names":["LinkedInParser","avoidTooShort","name","len","length","readFile","file","data","JSZip","loadAsync","Object","keys","files","Error","validate","result","entries","key","linkedInSchema","shape","includes","content","async","parseCSV","parse","convert","JSON","stringify","defaultResumeData","Profile","profile","twitterHandle","basics","location","headline","Headline","extractFirstWebsiteLink","entry","parseArrayLikeCSVEntry","replace","extractUrl","url","href","Websites","sections","summary","Summary","profiles","items","push","defaultProfile","id","createId","icon","network","username","email","Positions","position","experience","defaultExperience","company","Title","Location","Description","date","Education","education","defaultEducation","institution","studyType","Notes","Skills","skill","skills","defaultSkill","Name","Languages","language","languages","defaultLanguage","description","Proficiency","Certifications","certification","certifications","defaultCertification","issuer","Authority","Url","Projects","project","projects","defaultProject","resumeDataSchema","constructor","schema"],"mappings":"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"}